[{"F:\\projects\\blog\\src\\index.js":"1","F:\\projects\\blog\\src\\App.js":"2","F:\\projects\\blog\\src\\reportWebVitals.js":"3","F:\\projects\\blog\\src\\algorithms\\index.js":"4","F:\\projects\\blog\\src\\algorithms\\stack\\index.js":"5","F:\\projects\\blog\\src\\algorithms\\dynamicProgram\\index.js":"6","F:\\projects\\blog\\src\\algorithms\\dynamicProgram\\dp1.js":"7","F:\\projects\\blog\\src\\algorithms\\greedy\\index.js":"8","F:\\projects\\blog\\src\\algorithms\\greedy\\greedy1.js":"9"},{"size":500,"mtime":1611816651046,"results":"10","hashOfConfig":"11"},{"size":334,"mtime":1614923664298,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1611816651046,"results":"13","hashOfConfig":"11"},{"size":336,"mtime":1615260426975,"results":"14","hashOfConfig":"11"},{"size":1696,"mtime":1615016244051,"results":"15","hashOfConfig":"11"},{"size":386,"mtime":1615027190454,"results":"16","hashOfConfig":"11"},{"size":3446,"mtime":1615027118052,"results":"17","hashOfConfig":"11"},{"size":397,"mtime":1615259448144,"results":"18","hashOfConfig":"11"},{"size":2904,"mtime":1615269470228,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1daoe5p",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\projects\\blog\\src\\index.js",[],["42","43"],"F:\\projects\\blog\\src\\App.js",[],"F:\\projects\\blog\\src\\reportWebVitals.js",[],"F:\\projects\\blog\\src\\algorithms\\index.js",["44","45"],"F:\\projects\\blog\\src\\algorithms\\stack\\index.js",["46","47"],"// 栈问题\r\n// 有效的括号-20\r\n\r\n// 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\r\n\r\n// 有效字符串需满足：\r\n\r\n// 左括号必须用相同类型的右括号闭合。\r\n// 左括号必须以正确的顺序闭合。\r\n// 注意空字符串可被认为是有效字符串。\r\n// 示例 1:\r\n\r\n// 输入: \"()\"\r\n// 输出: true\r\n// 示例 2:\r\n\r\n// 输入: \"()[]{}\"\r\n// 输出: true\r\n// 示例 3:\r\n\r\n// 输入: \"(]\"\r\n// 输出: false\r\n// 示例 4:\r\n\r\n// 输入: \"([)]\"\r\n// 输出: false\r\n// 示例 5:\r\n\r\n// 输入: \"{[]}\"\r\n// 输出: true\r\n\r\nimport { useState, userEffect } from 'react';\r\nimport './style/index.css';\r\n\r\nexport default function Index() {\r\n  //   const [showSort, setShowSort] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <p\r\n        className=\"hoverClick\"\r\n        onClick={e => {\r\n          const result = runStack('[(]');\r\n          console.log('🚀 ~ file: index.js ~ line 44 ~ Index ~ result', result);\r\n        }}\r\n      >\r\n        Stack栈的算法解析\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction runStack(str) {\r\n  window.runStack = runStack;\r\n  const leftToRight = {\r\n    '(': ')',\r\n    '[': ']',\r\n    '{': '}',\r\n  };\r\n  const RightToLeft = {\r\n    ')': '(',\r\n    ']': '[',\r\n    '}': '{',\r\n  };\r\n  const stack = [];\r\n  for (let i = 0; i < str.length; i++) {\r\n    if (leftToRight[str[i]]) {\r\n      stack.push(str[i]);\r\n    } else if (RightToLeft[str[i]]) {\r\n      if (RightToLeft[str[i]] !== stack.pop()) return false;\r\n    } else {\r\n      return false;\r\n    }\r\n    console.log('🚀 ~ file: index.js ~ line 69 ~ runStack ~ stack', stack);\r\n  }\r\n  if (stack.length > 0) return false;\r\n  return true;\r\n}\r\n","F:\\projects\\blog\\src\\algorithms\\dynamicProgram\\index.js",["48"],"//  动态规划\r\n\r\nimport { useState, userEffect } from 'react';\r\nimport './style/index.css';\r\nimport DP1 from './dp1';\r\n\r\nexport default function Index() {\r\n  const [show, setShow] = useState(true);\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"hoverClick\" onClick={e => setShow(!show)}>\r\n        动态规划的算法解析\r\n      </p>\r\n      {show && <DP1 />}\r\n    </div>\r\n  );\r\n}\r\n","F:\\projects\\blog\\src\\algorithms\\dynamicProgram\\dp1.js",["49","50","51"],"// 打家劫舍 - 198\r\n\r\n// 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\r\n\r\n// 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\r\n\r\n// 示例 1:\r\n\r\n// 输入: [1,2,3,1]\r\n// 输出: 4\r\n// 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\r\n//   偷窃到的最高金额 = 1 + 3 = 4 。\r\n// 示例 2:\r\n\r\n// 输入: [2,7,9,3,1]\r\n// 输出: 12\r\n// 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\r\n//   偷窃到的最高金额 = 2 + 9 + 1 = 12 。\r\n\r\n// ----------------------------------------------------------------------------------------------------------------------\r\n\r\n// 动态规划的一个很重要的过程就是找到「状态」和「状态转移方程」，在这个问题里，设 i 是当前屋子的下标，状态就是 以 i 为起点偷窃的最大价值\r\n\r\n// 在某一个房子面前，盗贼只有两种选择：偷或者不偷。\r\n\r\n// 偷的话，价值就是「当前房子的价值」+「下两个房子开始盗窃的最大价值」\r\n// 不偷的话，价值就是「下一个房子开始盗窃的最大价值」\r\n// 在这两个值中，选择最大值记录在 dp[i]中，就得到了以 i 为起点所能偷窃的最大价值。。\r\n\r\n// 动态规划的起手式，找基础状态，在这题中，以终点为起点的最大价值一定是最好找的，因为终点不可能再继续往后偷窃了，所以设 n 为房子的总数量， dp[n - 1] 就是 nums[n - 1]，小偷只能选择偷窃这个房子，而不能跳过去选择下一个不存在的房子。\r\n\r\n// 那么就找到了动态规划的状态转移方程：\r\n// 从头开始往后\r\n// 打劫当前家：num[i] + dp[i-2]\r\n// 不打劫当前家：dp[i-1]\r\n// 转移方程是：dp[i] = max(num[i]+dp[i-2], dp[i-1])\r\n// 返回dp[n-1]\r\n\r\n// 从结尾开始\r\n// 打劫当前家：num[i] + dp[i+2]\r\n// 不打劫当前家：dp[i+1]\r\n// 转移方程是：dp[i] = max(num[i]+dp[i+2], dp[i+1])\r\n// 返回dp[0]\r\n\r\nimport { useState, userEffect } from 'react';\r\nimport './style/index.css';\r\n\r\nexport default function Dp1() {\r\n  //   const [showSort, setShowSort] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <p\r\n        className=\"hoverClick subTitle\"\r\n        onClick={e => {\r\n          const result = runFunc([1, 2, 3, 1]);\r\n          // const result = runFunc2([2, 7, 9, 3, 1]);\r\n          console.log('🚀 ~ file: dp1.js ~ line 57 ~ Dp1 ~ result', result);\r\n        }}\r\n      >\r\n        打家劫舍动态规划\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction runFunc(arr) {\r\n  window.runFunc = runFunc;\r\n  if (arr.length === 0 || !arr) return false;\r\n  const dp = [];\r\n  dp[0] = arr[0];\r\n  dp[1] = Math.max(arr[0], arr[1]);\r\n\r\n  for (let i = 2; i < arr.length; i++) {\r\n    dp[i] = Math.max(arr[i] + dp[i - 2], dp[i - 1]);\r\n  }\r\n  return dp[arr.length - 1];\r\n}\r\n\r\nfunction runFunc2(arr) {\r\n  window.runFunc = runFunc;\r\n  if (arr.length === 0 || !arr) return false;\r\n  const dp = [];\r\n\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    dp[i] = Math.max(arr[i] + (dp[i + 2] || 0), dp[i + 1] || 0);\r\n  }\r\n  return dp[0];\r\n}\r\n","F:\\projects\\blog\\src\\algorithms\\greedy\\index.js",["52"],"F:\\projects\\blog\\src\\algorithms\\greedy\\greedy1.js",["53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":10,"nodeType":"61","messageId":"62","endLine":1,"endColumn":18},{"ruleId":"59","severity":1,"message":"63","line":1,"column":20,"nodeType":"61","messageId":"62","endLine":1,"endColumn":30},{"ruleId":"59","severity":1,"message":"60","line":32,"column":10,"nodeType":"61","messageId":"62","endLine":32,"endColumn":18},{"ruleId":"59","severity":1,"message":"63","line":32,"column":20,"nodeType":"61","messageId":"62","endLine":32,"endColumn":30},{"ruleId":"59","severity":1,"message":"63","line":3,"column":20,"nodeType":"61","messageId":"62","endLine":3,"endColumn":30},{"ruleId":"59","severity":1,"message":"60","line":45,"column":10,"nodeType":"61","messageId":"62","endLine":45,"endColumn":18},{"ruleId":"59","severity":1,"message":"63","line":45,"column":20,"nodeType":"61","messageId":"62","endLine":45,"endColumn":30},{"ruleId":"59","severity":1,"message":"64","line":80,"column":10,"nodeType":"61","messageId":"62","endLine":80,"endColumn":18},{"ruleId":"59","severity":1,"message":"63","line":3,"column":20,"nodeType":"61","messageId":"62","endLine":3,"endColumn":30},{"ruleId":"59","severity":1,"message":"60","line":41,"column":10,"nodeType":"61","messageId":"62","endLine":41,"endColumn":18},{"ruleId":"59","severity":1,"message":"63","line":41,"column":20,"nodeType":"61","messageId":"62","endLine":41,"endColumn":30},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'userEffect' is defined but never used.","'runFunc2' is defined but never used.","no-global-assign","no-unsafe-negation"]